{"version":3,"sources":["../index.js"],"names":["greetings","require","globalMenu","alarms","cron","restify","botbuilder","server","createServer","listen","process","env","port","PORT","console","log","name","url","connector","ChatConnector","appId","APP_ID","appPassword","APP_SECRET","post","job1","CronJob","cronTime","onTick","start","timeZone","bot","UniversalBot","session","beginDialog","username","helpMessage","savedAddress","library","set","get","req","res","next","sendProactiveMessage","send","address","msg","Message","text","textLocale","dialog","args","message","setTimeout","Prompts","choice","listStyle","ListStyle","button"],"mappings":";;AAAA,IAAMA,YAAYC,QAAQ,qBAAR,CAAlB;AACA,IAAMC,aAAaD,QAAQ,QAAR,CAAnB;AACA,IAAME,SAASF,QAAQ,uBAAR,CAAf;AACA,IAAMG,OAAOH,QAAQ,MAAR,CAAb;AACA,IAAMI,UAAUJ,QAAQ,SAAR,CAAhB;AACA,IAAMK,aAAaL,QAAQ,YAAR,CAAnB;;AAEA,IAAMM,SAASF,QAAQG,YAAR,EAAf;;AAEAD,OAAOE,MAAP,CAAcC,QAAQC,GAAR,CAAYC,IAAZ,IAAoBF,QAAQC,GAAR,CAAYE,IAAhC,IAAwC,IAAtD,EAA4D,YAAY;AACpEC,YAAQC,GAAR,CAAY,sBAAZ,EAAoCR,OAAOS,IAA3C,EAAiDT,OAAOU,GAAxD;AACH,CAFD;;AAIA,IAAMC,YAAY,IAAIZ,WAAWa,aAAf,CAA6B;AAC3CC,WAAOV,QAAQC,GAAR,CAAYU,MADwB;AAE3CC,iBAAaZ,QAAQC,GAAR,CAAYY;AAFkB,CAA7B,CAAlB;;AAKAhB,OAAOiB,IAAP,CAAY,eAAZ,EAA6BN,UAAUT,MAAV,EAA7B;;AAEA,IAAIgB,OAAO,IAAIrB,KAAKsB,OAAT,CAAiB;AACxBC,cAAU,WADc;AAExBC,YAAQ,kBAAW;AACfd,gBAAQC,GAAR,CAAY,cAAZ;AACH,KAJuB;AAKxBc,WAAO,KALiB;AAMxBC,cAAU;AANc,CAAjB,CAAX;AAQA;;;AAGA,IAAMC,MAAM,IAAIzB,WAAW0B,YAAf,CAA4Bd,SAA5B,EAAuC,mBAAW;;AAE1De,YAAQC,WAAR,CAAoB,2BAApB;AACAD,YAAQC,WAAR,CAAoB,SAApB;AAEH,CALW,CAAZ;AAMA,IAAIC,WAAW,EAAf;AACA,IAAMC,cAAc,oJAApB;AACA,IAAIC,qBAAJ;;AAEA;AACAN,IAAIO,OAAJ,CAAYtC,SAAZ;AACA+B,IAAIO,OAAJ,CAAYpC,UAAZ;AACA6B,IAAIO,OAAJ,CAAYnC,MAAZ;;AAEA;AACA4B,IAAIQ,GAAJ,CAAQ,yBAAR,EAAmC,IAAnC;;AAEA;AACAhC,OAAOiC,GAAP,CAAW,mBAAX,EAAgC,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5CC,yBAAqBP,YAArB;AACAK,QAAIG,IAAJ,CAAS,WAAT;AACAF;AACH,CAJL;;AAOA;AACA,SAASC,oBAAT,CAA8BE,OAA9B,EAAuC;AACnC,QAAIC,MAAM,IAAIzC,WAAW0C,OAAf,GAAyBF,OAAzB,CAAiCA,OAAjC,CAAV;AACAC,QAAIE,IAAJ,CAAS,+BAAT;AACAF,QAAIG,UAAJ,CAAe,OAAf;AACAnB,QAAIc,IAAJ,CAASE,GAAT;AACH;;AAEDhB,IAAIoB,MAAJ,CAAW,SAAX,EAAsB,UAAClB,OAAD,EAAUmB,IAAV,EAAmB;;AAErCf,mBAAeJ,QAAQoB,OAAR,CAAgBP,OAA/B;;AAEA,QAAIO,UAAU,6GAAd;AACApB,YAAQY,IAAR,CAAaQ,OAAb;;AAEAA,cAAU,oDAAV;AACAA,eAAW,sBAAsB9C,OAAOuC,OAAP,GAAiBlC,IAAvC,GAA8C,mBAAzD;AACAqB,YAAQY,IAAR,CAAaQ,OAAb;;AAEAC,eAAW,YAAM;AACbV,6BAAqBP,YAArB;AACH,KAFD,EAEG,IAFH;AAGH,CAdD;;AAgBA;AACAN,IAAIoB,MAAJ,CAAW,UAAX,EAAuB,UAAClB,OAAD,EAAUmB,IAAV,EAAmB;;AAEtC;AACA9C,eAAWiD,OAAX,CAAmBC,MAAnB,CAA0BvB,OAA1B,EAAmC,cAAnC,EAAmD,gBAAnD,EAAqE,EAAEwB,WAAWnD,WAAWoD,SAAX,CAAqBC,MAAlC,EAArE;AAEH,CALD","file":"index.js","sourcesContent":["const greetings = require('./dialogs/greetings');\nconst globalMenu = require('./menu');\nconst alarms = require('./dialogs/alarmDialog');\nconst cron = require('cron');\nconst restify = require('restify');\nconst botbuilder = require('botbuilder');\n\nconst server = restify.createServer();\n\nserver.listen(process.env.port || process.env.PORT || 3987, function () {\n    console.log('%s bot started at %s', server.name, server.url)\n});\n\nconst connector = new botbuilder.ChatConnector({\n    appId: process.env.APP_ID,\n    appPassword: process.env.APP_SECRET\n});\n\nserver.post('/api/messages', connector.listen());\n\nlet job1 = new cron.CronJob({\n    cronTime: '* * * * *',\n    onTick: function() {\n        console.log('job 1 ticked');\n    },\n    start: false,\n    timeZone: 'Europe/Paris'\n});\n//job1.start();\n\n\nconst bot = new botbuilder.UniversalBot(connector, session => {\n\n    session.beginDialog('greetings:greetingsDialog');\n    session.beginDialog('example');\n\n});\nlet username = '';\nconst helpMessage = '\\n * I\\'m Simon, I repeat everything you say. \\n * I announce when an user comes or leaves the conversation. \\n * The feature works with bots too.';\nlet savedAddress;\n\n// Import dialogs\nbot.library(greetings);\nbot.library(globalMenu);\nbot.library(alarms);\n\n// Enable conversation data persistence\nbot.set('persistConversationData', true);\n\n// Do GET this endpoint to delivey a notification\nserver.get('/api/CustomWebApi', (req, res, next) => {\n        sendProactiveMessage(savedAddress);\n        res.send('triggered');\n        next();\n    }\n);\n\n// Send simple notifications\nfunction sendProactiveMessage(address) {\n    let msg = new botbuilder.Message().address(address);\n    msg.text('Hello, this is a notification');\n    msg.textLocale('en-US');\n    bot.send(msg);\n}\n\nbot.dialog('example', (session, args) => {\n\n    savedAddress = session.message.address;\n\n    let message = 'Hello! In a few seconds I\\'ll send you a message proactively to demonstrate how bots can initiate messages.';\n    session.send(message);\n\n    message = 'You can also make me send a message by accessing: ';\n    message += 'http://localhost:' + server.address().port + '/api/CustomWebApi';\n    session.send(message);\n\n    setTimeout(() => {\n        sendProactiveMessage(savedAddress);\n    }, 5000);\n});\n\n// root dialog\nbot.dialog('example2', (session, args) => {\n\n    // ListStyle passed in as Enum\n    botbuilder.Prompts.choice(session, \"Which color?\", \"red|green|blue\", { listStyle: botbuilder.ListStyle.button });\n\n});\n"]}